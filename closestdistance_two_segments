def closestDistance(a0,a1,b0,b1):
    import numpy as np
    import math
    r12=(a1-a0)
    r34=(b1-b0)
    r31=(a0-b0)
    k = [[np.dot(r12,r12),-np.dot(r12,r34)],[np.dot(r34,r12),-np.dot(r34,r34)]]
    k = np.array(k)
    f = [-np.dot(r12, r31),-np.dot(r34,r31)]
    f = np.array(f)
    aa=np.cross(r12,r34)
    if math.sqrt(np.dot(aa,aa))<=1*10**(-10):
        alpha = 0.
        beta = f[1]/k[1][1]
        F1 = ((1-alpha)*a0+alpha*a1-((1-beta)*b0+beta * b1))
        distance1 = math.sqrt(np.dot(F1,F1))
        alpha = 1
        beta = f[1]/k[1][1]
        F2 =((1-alpha)*a0+alpha*a1-((1-beta)*b0+beta*b1))
        distance2 = math.sqrt(np.dot(F2,F2))
        alpha = f[0]/k[0][0]
        beta = 0
        F3 = ((1-alpha)*a0 + alpha*a1 - ((1-beta)*b0 + beta*b1))
        distance3 = math.sqrt(np.dot(F3,F3))
        alpha = f[0]/k[0][0]
        beta = 1.
        F4 =((1-alpha)*a0+alpha*a1-((1-beta)*b0+beta*b1))
        distance4 = math.sqrt(np.dot(F4,F4))
        distance = min(distance1, distance2, distance3, distance4)
    else:
        [alpha, beta] = np.linalg.solve(k,f)
        F =((1-alpha)*a0+alpha*a1-((1-beta)*b0+beta*b1))
        if 0<alpha<1 and 0<beta<1:
            distance=math.sqrt(np.dot(F,F))
        else:
            alpha=0
            beta=0
            F1=((1-alpha)*a0+alpha*a1-((1-beta)*b0+beta*b1))
            distance1=math.sqrt(np.dot(F1,F1))
            alpha=0
            beta=1
            F2=((1-alpha)*a0+alpha*a1-((1-beta)*b0+beta*b1))
            distance2=math.sqrt(np.dot(F2,F2))
            alpha=1
            beta=0
            F3=((1-alpha)*a0+alpha*a1-((1-beta)*b0+beta*b1))
            distance3=math.sqrt(np.dot(F3,F3))
            alpha =1.
            beta = 1.
            F4 =((1-alpha)*a0+alpha*a1-((1-beta)*b0+beta*b1))
            distance4=math.sqrt(np.dot(F4,F4))
            # print 'distance4=',distance4
            distance=min(distance1,distance2,distance3,distance4)
    p0=(1-alpha)*a0+alpha*a1
    p1=(1-beta)*b0+beta*b1
    return p0,p1,distance
